/*
 * author: Clement Levallois
 */
package net.clementlevallois.wordcloud;

import java.awt.Desktop;
import java.beans.PropertyVetoException;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingWorker;
import org.gephi.graph.api.GraphModel;
import org.gephi.utils.longtask.api.LongTaskExecutor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;

//@ConvertAsProperties(
//        dtd = "-//net.clementlevallois.wordcloud//Lexplorer//EN",
//        autostore = false
//)
@TopComponent.Description(
        preferredID = "LexplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "filtersmode", openAtStartup = false)
@ActionID(category = "Window", id = "net.clementlevallois.wordcloud.LexplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#expression.gephi_menu_item.title",
        preferredID = "LexplorerTopComponent"
)

public final class LexplorerTopComponent extends TopComponent {

    private GraphModel graphModel;

    private Boolean running = false;

    private static final long serialVersionUID = 305983503930l;

    private static final ResourceBundle bundle = NbBundle.getBundle(LexplorerTopComponent.class);

    private final LongTaskExecutor executor;

    private List<String> selectedLanguages;

    private TopWordsFinderRunnable topWordsRetrieverAsRunnable;
    private InitialWordProcessingRunnable initialWordProcessingRunnable;

    private SwingWorker uiUpdaterAsSwingWorker;

    private LogAreaUpdater logAreaUpdater;

    public LexplorerTopComponent() throws IOException, PropertyVetoException {
        initComponents();
        setName(bundle.getString("expression.top_panel.title"));
        setToolTipText(bundle.getString("expression.top_panel.tooltip"));

        // initializing the graph
        graphModel = GraphOperations.graphInitFromCurrentlyOpenedProject();
        DefaultListModel<String> listModelOfNodeAttributes;

        // loading the names of nodes attributes
        if (graphModel == null) {
            listModelOfNodeAttributes = new DefaultListModel();
            loggingjTextField.setText("<html>" + bundle.getString("expression.warning.open_network") + "</html>");
        } else {
            listModelOfNodeAttributes = GraphOperations.returnTextualNodeAttributesAsListOfNames(graphModel);
        }
        jListOfNodeAttributes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jListOfNodeAttributes.setModel(listModelOfNodeAttributes);

        jCheckBoxEnglishDefault.setSelected(true);

        jListLanguages.setModel(TopTermExtractor.returnListOfLanguages());
        jListLanguages.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        // setting the default values of the top terms to display
        // in the constructor: spinnerMode: value, min, max, step
        SpinnerModel spinnerModel = new SpinnerNumberModel(StaticProperties.DEFAULT_WORDS_TO_DISPLAY, StaticProperties.MIN_WORDS_TO_DISPLAY, StaticProperties.MAX_WORDS_TO_DISPLAY, StaticProperties.STEP_SPINNER);
        jSpinnerNumberTopTerms.setModel(spinnerModel);

        executor = new LongTaskExecutor(true, "Word Cloud Plugin", 100);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tabbedPane = new javax.swing.JTabbedPane();
        parametersPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jCheckBoxEnglishDefault = new javax.swing.JCheckBox();
        jPanelNumberTopTerms = new javax.swing.JPanel();
        jInternalFrameMoreLanguages = new javax.swing.JInternalFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListLanguages = new javax.swing.JList<>();
        numberTopWordsFrame = new javax.swing.JInternalFrame();
        jSpinnerNumberTopTerms = new javax.swing.JSpinner();
        jPanelForTwoParams = new javax.swing.JPanel();
        attributeFrame = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListOfNodeAttributes = new javax.swing.JList<>();
        jPanelRefreshButton = new javax.swing.JPanel();
        javax.swing.JButton jButtonRefreshNodeAttributes = new javax.swing.JButton();
        loggingjTextField = new javax.swing.JLabel();
        wordCloudPanel = new javax.swing.JPanel();
        placeHolderForTopTerms = new javax.swing.JLabel();
        helpPanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanelForGephiLinks = new javax.swing.JPanel();
        jLabelHelpfulLinks = new javax.swing.JLabel();
        jLabelGephiFBUrl = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanelLabelsForMaintainer = new javax.swing.JPanel();
        jLabelPluginMaintainedBy = new javax.swing.JLabel();
        jLabelUrlClementLevallois = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabelVisitTheTutorial = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 50), new java.awt.Dimension(0, 5000), new java.awt.Dimension(32767, 50));
        runButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(350, 832));
        jPanel1.setLayout(new java.awt.BorderLayout());

        tabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        tabbedPane.setAlignmentX(1.5F);
        tabbedPane.setPreferredSize(new java.awt.Dimension(250, 800));

        parametersPanel.setName(""); // NOI18N
        parametersPanel.setLayout(new java.awt.GridLayout(3, 1, 5, 5));

        jPanel2.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxEnglishDefault, org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.jCheckBoxEnglishDefault.text")); // NOI18N
        jPanel2.add(jCheckBoxEnglishDefault, java.awt.BorderLayout.NORTH);

        jPanelNumberTopTerms.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanelNumberTopTerms.setPreferredSize(new java.awt.Dimension(250, 200));
        jPanelNumberTopTerms.setLayout(new java.awt.GridLayout(1, 2));

        jInternalFrameMoreLanguages.setTitle(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.LanguageSelection.Title")); // NOI18N
        jInternalFrameMoreLanguages.setAutoscrolls(true);
        jInternalFrameMoreLanguages.setFrameIcon(null);
        jInternalFrameMoreLanguages.setVisible(true);

        jListLanguages.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jListLanguages);

        jInternalFrameMoreLanguages.getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanelNumberTopTerms.add(jInternalFrameMoreLanguages);

        numberTopWordsFrame.setTitle(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.numberTopWordsFrame.title")); // NOI18N
        numberTopWordsFrame.setFrameIcon(null);
        numberTopWordsFrame.setMaximumSize(new java.awt.Dimension(250, 100));
        numberTopWordsFrame.setMinimumSize(new java.awt.Dimension(250, 100));
        numberTopWordsFrame.setPreferredSize(new java.awt.Dimension(250, 100));
        numberTopWordsFrame.setVisible(true);
        numberTopWordsFrame.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSpinnerNumberTopTerms.setMaximumSize(new java.awt.Dimension(250, 50));
        jSpinnerNumberTopTerms.setMinimumSize(new java.awt.Dimension(100, 50));
        jSpinnerNumberTopTerms.setPreferredSize(new java.awt.Dimension(250, 50));
        jSpinnerNumberTopTerms.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerNumberTopTermsStateChanged(evt);
            }
        });
        numberTopWordsFrame.getContentPane().add(jSpinnerNumberTopTerms, new java.awt.GridBagConstraints());

        jPanelNumberTopTerms.add(numberTopWordsFrame);

        jPanel2.add(jPanelNumberTopTerms, java.awt.BorderLayout.CENTER);

        parametersPanel.add(jPanel2);

        jPanelForTwoParams.setLayout(new java.awt.BorderLayout());

        attributeFrame.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        attributeFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        attributeFrame.setTitle(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.attributeFrame.title")); // NOI18N
        attributeFrame.setFrameIcon(null);
        attributeFrame.setMaximumSize(new java.awt.Dimension(250, 2147483647));
        attributeFrame.setMinimumSize(new java.awt.Dimension(250, 5));
        attributeFrame.setPreferredSize(new java.awt.Dimension(250, 137));
        attributeFrame.setVisible(true);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(250, 100));

        jListOfNodeAttributes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListOfNodeAttributes.setMinimumSize(new java.awt.Dimension(0, 100));
        jListOfNodeAttributes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListOfNodeAttributesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListOfNodeAttributes);

        attributeFrame.getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);
        jScrollPane1.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.jScrollPane1.AccessibleContext.accessibleName")); // NOI18N

        jPanelRefreshButton.setPreferredSize(new java.awt.Dimension(250, 30));
        jPanelRefreshButton.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jButtonRefreshNodeAttributes, org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.jButtonRefreshNodeAttributes.text")); // NOI18N
        jButtonRefreshNodeAttributes.setMinimumSize(new java.awt.Dimension(72, 13));
        jButtonRefreshNodeAttributes.setPreferredSize(new java.awt.Dimension(72, 13));
        jButtonRefreshNodeAttributes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshNodeAttributesActionPerformed(evt);
            }
        });
        jPanelRefreshButton.add(jButtonRefreshNodeAttributes, java.awt.BorderLayout.CENTER);

        attributeFrame.getContentPane().add(jPanelRefreshButton, java.awt.BorderLayout.SOUTH);

        jPanelForTwoParams.add(attributeFrame, java.awt.BorderLayout.CENTER);

        parametersPanel.add(jPanelForTwoParams);

        loggingjTextField.setBackground(new java.awt.Color(102, 102, 102));
        loggingjTextField.setForeground(new java.awt.Color(102, 255, 0));
        loggingjTextField.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loggingjTextField.setAlignmentX(1.5F);
        loggingjTextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        loggingjTextField.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loggingjTextField.setOpaque(true);
        parametersPanel.add(loggingjTextField);

        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.TabConstraints.tabTitle"), parametersPanel); // NOI18N

        wordCloudPanel.setPreferredSize(new java.awt.Dimension(250, 800));
        wordCloudPanel.setLayout(new java.awt.BorderLayout());

        placeHolderForTopTerms.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        org.openide.awt.Mnemonics.setLocalizedText(placeHolderForTopTerms, org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.placeHolderForTopTerms.text")); // NOI18N
        placeHolderForTopTerms.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        wordCloudPanel.add(placeHolderForTopTerms, java.awt.BorderLayout.CENTER);
        placeHolderForTopTerms.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.placeHolderForTopTerms.AccessibleContext.accessibleName")); // NOI18N

        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.wordCloudPanel.TabConstraints.tabTitle"), wordCloudPanel); // NOI18N

        helpPanel.setMinimumSize(new java.awt.Dimension(110, 52));
        helpPanel.setPreferredSize(new java.awt.Dimension(329, 150));
        helpPanel.setLayout(new javax.swing.BoxLayout(helpPanel, javax.swing.BoxLayout.Y_AXIS));

        jPanel5.setAlignmentX(10.0F);
        jPanel5.setAlignmentY(3.0F);
        jPanel5.setLayout(new java.awt.BorderLayout(5, 5));

        jPanelForGephiLinks.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.jPanelForGephiLinks.border.title"))); // NOI18N
        jPanelForGephiLinks.setLayout(new java.awt.BorderLayout(5, 5));

        org.openide.awt.Mnemonics.setLocalizedText(jLabelHelpfulLinks, org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.jLabelHelpfulLinks.text")); // NOI18N
        jLabelHelpfulLinks.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanelForGephiLinks.add(jLabelHelpfulLinks, java.awt.BorderLayout.CENTER);

        org.openide.awt.Mnemonics.setLocalizedText(jLabelGephiFBUrl, "<html><a href=\"https://facebook.com/groups/gephi\" style=\"color: #0000EE; text-decoration: underline;\">Facebook group for Gephi</a></html>"); // NOI18N
        jLabelGephiFBUrl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelGephiFBUrl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelGephiFBUrlMouseClicked(evt);
            }
        });
        jPanelForGephiLinks.add(jLabelGephiFBUrl, java.awt.BorderLayout.EAST);

        jPanel5.add(jPanelForGephiLinks, java.awt.BorderLayout.CENTER);

        helpPanel.add(jPanel5);

        jPanel4.setAlignmentX(3.0F);
        jPanel4.setAlignmentY(3.0F);
        jPanel4.setLayout(new java.awt.BorderLayout(5, 5));

        jPanelLabelsForMaintainer.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.jPanelLabelsForMaintainer.border.title"))); // NOI18N
        jPanelLabelsForMaintainer.setLayout(new java.awt.BorderLayout(5, 5));

        org.openide.awt.Mnemonics.setLocalizedText(jLabelPluginMaintainedBy, org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.jLabelPluginMaintainedBy.text")); // NOI18N
        jLabelPluginMaintainedBy.setAlignmentX(4.0F);
        jLabelPluginMaintainedBy.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanelLabelsForMaintainer.add(jLabelPluginMaintainedBy, java.awt.BorderLayout.CENTER);

        org.openide.awt.Mnemonics.setLocalizedText(jLabelUrlClementLevallois, "<html><a href=\"https://twitter.com/seinecle\" style=\"color: #0000EE; text-decoration: underline;\">Clement Levallois</a></html>"); // NOI18N
        jLabelUrlClementLevallois.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelUrlClementLevallois.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelUrlClementLevalloisMouseClicked(evt);
            }
        });
        jPanelLabelsForMaintainer.add(jLabelUrlClementLevallois, java.awt.BorderLayout.EAST);

        jPanel4.add(jPanelLabelsForMaintainer, java.awt.BorderLayout.CENTER);

        helpPanel.add(jPanel4);

        jPanel7.setAlignmentX(3.0F);
        jPanel7.setAlignmentY(3.0F);
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.jPanel8.border.title"))); // NOI18N
        jPanel8.setMinimumSize(new java.awt.Dimension(120, 55));
        jPanel8.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabelVisitTheTutorial, org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.jLabelVisitTheTutorial.text ")); // NOI18N
        jLabelVisitTheTutorial.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanel8.add(jLabelVisitTheTutorial, java.awt.BorderLayout.CENTER);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.jLabel3.text")); // NOI18N
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        jPanel8.add(jLabel3, java.awt.BorderLayout.EAST);

        jPanel7.add(jPanel8, java.awt.BorderLayout.CENTER);

        helpPanel.add(jPanel7);
        helpPanel.add(filler1);

        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.helpPanel.TabConstraints.tabTitle"), helpPanel); // NOI18N

        jPanel1.add(tabbedPane, java.awt.BorderLayout.CENTER);
        tabbedPane.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.tabbedPane.AccessibleContext.accessibleName")); // NOI18N

        runButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        runButton.setForeground(new java.awt.Color(204, 51, 0));
        org.openide.awt.Mnemonics.setLocalizedText(runButton, org.openide.util.NbBundle.getMessage(LexplorerTopComponent.class, "LexplorerTopComponent.runButton.text")); // NOI18N
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        jPanel1.add(runButton, java.awt.BorderLayout.SOUTH);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed

        // Boolean (true / false) variable checking if the plugin is running or not
        running = !running;
        if (running) {
            if (graphModel == null) {
                logAreaUpdater = new LogAreaUpdater(bundle.getString("expression.warning.open_network"));
                logAreaUpdater.execute();
                running = !running;
                return;
            }
            runButton.setText(bundle.getString("expression.cancel"));
            String selectedColumnId = jListOfNodeAttributes.getSelectedValue();
            if (selectedColumnId == null || selectedColumnId.isEmpty()) {
                logAreaUpdater = new LogAreaUpdater(bundle.getString("expression.warning.no_node_attribute_selected"));
                logAreaUpdater.execute();
                placeHolderForTopTerms.setText("");
                running = !running;
                return;
            }
            logAreaUpdater = new LogAreaUpdater(bundle.getString("expression.analyzing_text_please_wait"));
            logAreaUpdater.execute();
            executor.setLongTaskListener(longTask -> {
                if (longTask instanceof InitialWordProcessingRunnable) {
                    logAreaUpdater = new LogAreaUpdater(bundle.getString("expression.finished_ready_to_run"));
                    logAreaUpdater.execute();
                    int topTermsToRetrieve = (Integer) jSpinnerNumberTopTerms.getValue();
                    topWordsRetrieverAsRunnable = new TopWordsFinderRunnable(StaticProperties.REFRESH_RATE_COMPUTATION, topTermsToRetrieve);
                    uiUpdaterAsSwingWorker = new UIUpdater(StaticProperties.REFRESH_RATE_UI);
                    uiUpdaterAsSwingWorker.execute();
                    executor.execute(topWordsRetrieverAsRunnable, topWordsRetrieverAsRunnable);
                    logAreaUpdater = new LogAreaUpdater(bundle.getString("expression.switch_to_wordcloud_tab_and_select"));
                    logAreaUpdater.execute();
                }
            });

            List<String> selectedValuesList = jListLanguages.getSelectedValuesList();
            selectedLanguages = new ArrayList(selectedValuesList);

            if (jCheckBoxEnglishDefault.isSelected()) {
                selectedLanguages.add(StaticProperties.DEFAULT_TEXT_LANGUAGE);
            }

            initialWordProcessingRunnable = new InitialWordProcessingRunnable(graphModel, selectedColumnId, selectedLanguages);
            executor.execute(initialWordProcessingRunnable, initialWordProcessingRunnable);
        } else {
            if (initialWordProcessingRunnable != null) {
                initialWordProcessingRunnable.interruptInitialAnalysis();
            }
            runButton.setText(bundle.getString("LexplorerTopComponent.runButton.text"));
            executor.cancel();
            if (uiUpdaterAsSwingWorker != null) {
                uiUpdaterAsSwingWorker.cancel(true);
            }
            logAreaUpdater = new LogAreaUpdater(bundle.getString("expression.warning.wordcloud_analysis_stopped"));
            logAreaUpdater.execute();
    }//GEN-LAST:event_runButtonActionPerformed
    }
    private void jButtonRefreshNodeAttributesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshNodeAttributesActionPerformed
        // loading the names of nodes attributes inthe currently opened network
        DefaultListModel<String> listModelOfNodeAttributes;

        graphModel = GraphOperations.graphInitFromCurrentlyOpenedProject();
        // if we still don't have a graphModel, it means no network is currently opened
        if (graphModel == null) {
            listModelOfNodeAttributes = new DefaultListModel();
            logAreaUpdater = new LogAreaUpdater(bundle.getString("expression.warning.open_network"));
            logAreaUpdater.execute();
        } else {
            // we have retrieved the opened network. Let's get the names of the nodes attributes from it
            listModelOfNodeAttributes = GraphOperations.returnTextualNodeAttributesAsListOfNames(graphModel);
            logAreaUpdater = new LogAreaUpdater(bundle.getString("expression.please_select_attribute"));
            logAreaUpdater.execute();
        }
        jListOfNodeAttributes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jListOfNodeAttributes.setModel(listModelOfNodeAttributes);
    }//GEN-LAST:event_jButtonRefreshNodeAttributesActionPerformed

    private void jListOfNodeAttributesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListOfNodeAttributesValueChanged
        logAreaUpdater = new LogAreaUpdater(bundle.getString("expression.plugin_wil_analyze_this_attribute") + " " + jListOfNodeAttributes.getSelectedValue());
        logAreaUpdater.execute();
    }//GEN-LAST:event_jListOfNodeAttributesValueChanged

    private void jSpinnerNumberTopTermsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerNumberTopTermsStateChanged
        if (topWordsRetrieverAsRunnable != null) {
            int topTermsToRetrieve = (Integer) jSpinnerNumberTopTerms.getValue();
            topWordsRetrieverAsRunnable.setTopWordsToRetrieve(topTermsToRetrieve);
        }
    }//GEN-LAST:event_jSpinnerNumberTopTermsStateChanged

    private void jLabelUrlClementLevalloisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelUrlClementLevalloisMouseClicked
        openWebpage(URI.create(StaticProperties.MAINTAINER_URL));
    }//GEN-LAST:event_jLabelUrlClementLevalloisMouseClicked

    private void jLabelGephiFBUrlMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelGephiFBUrlMouseClicked
        openWebpage(URI.create(StaticProperties.GEPHI_FACEBOOK_GROUP_URL));
    }//GEN-LAST:event_jLabelGephiFBUrlMouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        openWebpage(URI.create(StaticProperties.TUTORIAL_WEB_LINK));
    }//GEN-LAST:event_jLabel3MouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JInternalFrame attributeFrame;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JPanel helpPanel;
    private javax.swing.JCheckBox jCheckBoxEnglishDefault;
    private javax.swing.JInternalFrame jInternalFrameMoreLanguages;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelGephiFBUrl;
    private javax.swing.JLabel jLabelHelpfulLinks;
    private javax.swing.JLabel jLabelPluginMaintainedBy;
    private javax.swing.JLabel jLabelUrlClementLevallois;
    private javax.swing.JLabel jLabelVisitTheTutorial;
    private javax.swing.JList<String> jListLanguages;
    private javax.swing.JList<String> jListOfNodeAttributes;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanelForGephiLinks;
    private javax.swing.JPanel jPanelForTwoParams;
    private javax.swing.JPanel jPanelLabelsForMaintainer;
    private javax.swing.JPanel jPanelNumberTopTerms;
    private javax.swing.JPanel jPanelRefreshButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinnerNumberTopTerms;
    private javax.swing.JLabel loggingjTextField;
    private javax.swing.JInternalFrame numberTopWordsFrame;
    private javax.swing.JPanel parametersPanel;
    private javax.swing.JLabel placeHolderForTopTerms;
    private javax.swing.JButton runButton;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JPanel wordCloudPanel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

//    void writeProperties(java.util.Properties p) {
//    }
//
//    void readProperties(java.util.Properties p) {
//    }
    private class UIUpdater extends SwingWorker<String, String> {

        long pauseInMillis;

        public UIUpdater(long pauseInMillis) {
            this.pauseInMillis = pauseInMillis;
        }

        @Override
        public String doInBackground() throws InterruptedException {
            while (!this.isCancelled()) {
                String intermediary = topWordsRetrieverAsRunnable.getIntermediary();
                if (intermediary != null && !intermediary.isBlank()) {
                    placeHolderForTopTerms.setText(String.format("<html><body style=\"text-align: justify;  text-justify: inter-word;\">%s</body></html>", intermediary));
                } else {
                    placeHolderForTopTerms.setText(String.format("<html><body style=\"text-align: justify;  text-justify: inter-word;\">%s</body></html>", bundle.getString("expression.no_node_selected")));
                }
                Thread.sleep(pauseInMillis);
            }
            return "";
        }
    }

    private class LogAreaUpdater extends SwingWorker<String, String> {

        String messageWithoutHtmlEnclosingTags;

        public LogAreaUpdater(String messageWithoutHtmlEnclosingTags) {
            this.messageWithoutHtmlEnclosingTags = messageWithoutHtmlEnclosingTags;
        }

        @Override
        public String doInBackground() throws InterruptedException {
            loggingjTextField.setText("<html>" + messageWithoutHtmlEnclosingTags + "</html>");
            return "";
        }
    }

    public static boolean openWebpage(URI uri) {
        Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
            try {
                desktop.browse(uri);
                return true;
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return false;
    }

    public static boolean openWebpage(URL url) {
        try {
            return openWebpage(url.toURI());
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
        return false;
    }
}
