/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package fr.totetmatt.blueskygephi;

import java.awt.Color;
import java.awt.Desktop;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;

/**
 *
 * @author totetmatt
 */

@TopComponent.Description(preferredID = "BlueskyGephiMainPanel",
        iconBase = "fr/totetmatt/gephi/twitter/twitterlogo.png"
)


@ActionReference(path = "Menu/Window", position = 334)
@TopComponent.OpenActionRegistration(displayName = "Bluesky Gephi",
        preferredID = "MainTwitterStreamerWindow")
@ActionID(category = "Window", id = "fr.totetmatt.blueskygephi.BlueskyGephiMainPanel")
@TopComponent.Registration(mode = "layoutmode", openAtStartup = true, position=2)
public class BlueskyGephiMainPanel extends TopComponent {
    protected static final Logger consoleLogger = Logger.getLogger(BlueskyGephiMainPanel.class.getName());
    private final BlueskyGephi blueskyGephi;
    /**
     * Creates new form BlueskyGephiMainPanel
     */
    public BlueskyGephiMainPanel() {
        initComponents();
        blueskyGephi  = Lookup.getDefault().lookup(BlueskyGephi.class);
        
        credentialsHandleField.setText(blueskyGephi.getHandle());
        credentialsPasswordField.setText(blueskyGephi.getPassword());
        handleSearchTextArea.setText(blueskyGephi.getQuery());
        isFollowersActivated.setSelected(blueskyGephi.getIsFollowersActive());
        isFollowsActivated.setSelected(blueskyGephi.getIsFollowsActive());
        isDeepSearch.setSelected(blueskyGephi.getIsDeepSearch());
        limitCrawlCheckbox.setSelected(blueskyGephi.getIsLimitCrawlActive());
        limitCrawlSpinner.setValue(blueskyGephi.getLimitCrawl()*100);
        limitCrawlSpinner.setEnabled(limitCrawlCheckbox.isSelected());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        credentialsPanel = new javax.swing.JPanel();
        credentialsHandleLabel = new javax.swing.JLabel();
        credentialsHandleField = new javax.swing.JTextField();
        credentialsPasswordLabel = new javax.swing.JLabel();
        credentialsPasswordField = new javax.swing.JPasswordField();
        credentialsConnectButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        handleSearchTextArea = new javax.swing.JTextArea();
        fetchLabel = new javax.swing.JLabel();
        isFollowersActivated = new javax.swing.JCheckBox();
        isFollowsActivated = new javax.swing.JCheckBox();
        runFetchButton = new javax.swing.JButton();
        isDeepSearch = new javax.swing.JCheckBox();
        limitCrawlCheckbox = new javax.swing.JCheckBox();
        limitCrawlSpinner = new javax.swing.JSpinner();

        setToolTipText(org.openide.util.NbBundle.getMessage(BlueskyGephiMainPanel.class, "BlueskyGephiMainPanel.toolTipText")); // NOI18N
        setName("Bluesky Gephi"); // NOI18N

        credentialsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(BlueskyGephiMainPanel.class, "BlueskyGephiMainPanel.credentialsPanel.border.title"))); // NOI18N
        credentialsPanel.setToolTipText(org.openide.util.NbBundle.getMessage(BlueskyGephiMainPanel.class, "BlueskyGephiMainPanel.Credentials.toolTipText")); // NOI18N
        credentialsPanel.setName("Credentials"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(credentialsHandleLabel, org.openide.util.NbBundle.getMessage(BlueskyGephiMainPanel.class, "BlueskyGephiMainPanel.credentialsHandleLabel.text")); // NOI18N

        credentialsHandleField.setText(org.openide.util.NbBundle.getMessage(BlueskyGephiMainPanel.class, "BlueskyGephiMainPanel.credentialsHandleField.text")); // NOI18N

        credentialsPasswordLabel.setForeground(new java.awt.Color(0, 51, 255));
        org.openide.awt.Mnemonics.setLocalizedText(credentialsPasswordLabel, org.openide.util.NbBundle.getMessage(BlueskyGephiMainPanel.class, "BlueskyGephiMainPanel.credentialsPasswordLabel.text")); // NOI18N
        credentialsPasswordLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        credentialsPasswordLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                credentialsPasswordLabelMouseClicked(evt);
            }
        });

        credentialsPasswordField.setText(org.openide.util.NbBundle.getMessage(BlueskyGephiMainPanel.class, "BlueskyGephiMainPanel.credentialsPasswordField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(credentialsConnectButton, org.openide.util.NbBundle.getMessage(BlueskyGephiMainPanel.class, "BlueskyGephiMainPanel.credentialsConnectButton.text")); // NOI18N
        credentialsConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                credentialsConnectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout credentialsPanelLayout = new javax.swing.GroupLayout(credentialsPanel);
        credentialsPanel.setLayout(credentialsPanelLayout);
        credentialsPanelLayout.setHorizontalGroup(
            credentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(credentialsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(credentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(credentialsConnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(credentialsPanelLayout.createSequentialGroup()
                        .addGroup(credentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(credentialsPasswordLabel)
                            .addComponent(credentialsHandleLabel))
                        .addGap(18, 18, 18)
                        .addGroup(credentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(credentialsHandleField)
                            .addComponent(credentialsPasswordField))))
                .addContainerGap())
        );
        credentialsPanelLayout.setVerticalGroup(
            credentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(credentialsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(credentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(credentialsHandleLabel)
                    .addComponent(credentialsHandleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(credentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(credentialsPasswordLabel)
                    .addComponent(credentialsPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(credentialsConnectButton)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        handleSearchTextArea.setColumns(20);
        handleSearchTextArea.setRows(5);
        jScrollPane1.setViewportView(handleSearchTextArea);

        org.openide.awt.Mnemonics.setLocalizedText(fetchLabel, org.openide.util.NbBundle.getMessage(BlueskyGephiMainPanel.class, "BlueskyGephiMainPanel.fetchLabel.text")); // NOI18N

        isFollowersActivated.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(isFollowersActivated, org.openide.util.NbBundle.getMessage(BlueskyGephiMainPanel.class, "BlueskyGephiMainPanel.isFollowersActivated.text")); // NOI18N
        isFollowersActivated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isFollowersActivatedActionPerformed(evt);
            }
        });

        isFollowsActivated.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(isFollowsActivated, org.openide.util.NbBundle.getMessage(BlueskyGephiMainPanel.class, "BlueskyGephiMainPanel.isFollowsActivated.text")); // NOI18N
        isFollowsActivated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isFollowsActivatedActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(runFetchButton, org.openide.util.NbBundle.getMessage(BlueskyGephiMainPanel.class, "BlueskyGephiMainPanel.runFetchButton.text")); // NOI18N
        runFetchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runFetchButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(isDeepSearch, org.openide.util.NbBundle.getMessage(BlueskyGephiMainPanel.class, "BlueskyGephiMainPanel.isDeepSearch.text")); // NOI18N
        isDeepSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isDeepSearchActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(limitCrawlCheckbox, org.openide.util.NbBundle.getMessage(BlueskyGephiMainPanel.class, "BlueskyGephiMainPanel.limitCrawlCheckbox.text")); // NOI18N
        limitCrawlCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limitCrawlCheckboxActionPerformed(evt);
            }
        });

        limitCrawlSpinner.setToolTipText(org.openide.util.NbBundle.getMessage(BlueskyGephiMainPanel.class, "BlueskyGephiMainPanel.limitCrawlSpinner.toolTipText")); // NOI18N
        limitCrawlSpinner.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                limitCrawlSpinnerPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fetchLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(isFollowersActivated)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(isFollowsActivated))
                            .addComponent(isDeepSearch))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(limitCrawlSpinner)
                            .addComponent(limitCrawlCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(runFetchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                    .addComponent(credentialsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(credentialsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fetchLabel)
                    .addComponent(isFollowersActivated)
                    .addComponent(isFollowsActivated)
                    .addComponent(limitCrawlCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isDeepSearch)
                    .addComponent(limitCrawlSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runFetchButton)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        limitCrawlSpinner.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(BlueskyGephiMainPanel.class, "BlueskyGephiMainPanel.limitCrawlSpinner.AccessibleContext.accessibleDescription")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void isFollowersActivatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isFollowersActivatedActionPerformed
        blueskyGephi.setIsFollowersActive(isFollowersActivated.isSelected());
    }//GEN-LAST:event_isFollowersActivatedActionPerformed

    private void credentialsConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_credentialsConnectButtonActionPerformed
       if(blueskyGephi.connect(credentialsHandleField.getText(), String.valueOf(credentialsPasswordField.getPassword()))){
           credentialsConnectButton.setBackground(Color.GREEN);
       } else {
           credentialsConnectButton.setBackground(Color.RED);
       }
    }//GEN-LAST:event_credentialsConnectButtonActionPerformed

    private void runFetchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runFetchButtonActionPerformed
         blueskyGephi.setQuery(handleSearchTextArea.getText());
         List<String> actors = Arrays.asList(handleSearchTextArea.getText().split("\\n"))
                .stream()
                .map(x -> x.trim())
                .collect(Collectors.toList());
       blueskyGephi.fetchFollowerFollowsFromActors(actors);
        
    }//GEN-LAST:event_runFetchButtonActionPerformed

    private void isFollowsActivatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isFollowsActivatedActionPerformed
        blueskyGephi.setIsFollowsActive(isFollowsActivated.isSelected()); 
    }//GEN-LAST:event_isFollowsActivatedActionPerformed

    private void credentialsPasswordLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_credentialsPasswordLabelMouseClicked
        try {
            Desktop.getDesktop().browse(URI.create("https://bsky.app/settings/app-passwords"));        // TODO add your handling code here:
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_credentialsPasswordLabelMouseClicked

    private void isDeepSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isDeepSearchActionPerformed
        blueskyGephi.setIsDeepSearch(isDeepSearch.isSelected());
    }//GEN-LAST:event_isDeepSearchActionPerformed

    private void limitCrawlCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limitCrawlCheckboxActionPerformed
            blueskyGephi.setIsLimitCrawlActive(limitCrawlCheckbox.isSelected());
            limitCrawlSpinner.setEnabled(limitCrawlCheckbox.isSelected());
            
    }//GEN-LAST:event_limitCrawlCheckboxActionPerformed

    private void limitCrawlSpinnerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_limitCrawlSpinnerPropertyChange
            blueskyGephi.setLimitCrawl(Math.max(1,((int)limitCrawlSpinner.getValue())/100));
    }//GEN-LAST:event_limitCrawlSpinnerPropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton credentialsConnectButton;
    private javax.swing.JTextField credentialsHandleField;
    private javax.swing.JLabel credentialsHandleLabel;
    private javax.swing.JPanel credentialsPanel;
    private javax.swing.JPasswordField credentialsPasswordField;
    private javax.swing.JLabel credentialsPasswordLabel;
    private javax.swing.JLabel fetchLabel;
    private javax.swing.JTextArea handleSearchTextArea;
    private javax.swing.JCheckBox isDeepSearch;
    private javax.swing.JCheckBox isFollowersActivated;
    private javax.swing.JCheckBox isFollowsActivated;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox limitCrawlCheckbox;
    private javax.swing.JSpinner limitCrawlSpinner;
    private javax.swing.JButton runFetchButton;
    // End of variables declaration//GEN-END:variables
}
